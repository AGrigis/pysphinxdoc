#! /usr/bin/env python
##########################################################################
# pysphinxdoc - Copyright (C) AGrigis, 2016
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

# System import
from __future__ import print_function
import os
from setuptools import find_packages
import argparse

# Pysphinxdoc import
from pysphinxdoc.docgen import DocHelperWriter

doc = """
Script to auto-generate API documentation for Python modules based on their
reStructuredText docstrings.

Here is an exemple to generate the 'pysphinxdoc' module documentation:
first execute 'python sphinxdoc -v 2 -p $HOME/git/pysphinxdoc/ -n pysphinxdoc
-o $HOME/git/pysphinxdoc/doc/' and then in the $HOME/git/pysphinxdoc/doc/
folder 'make raw-html'.

Expect a '$name_module/doc/source/_static' folder containing a logo named
'$name_module.png' and an 'carousel' subfolder containing a list of images
to be displayed in the index banner of the site.

The documentation is generated from the reStructuredText docstrings of each
module, function or class.

In order to find module information, an 'info.py' module is expected at the
root of the module with mandatory keys:

    * NAME: the name of the module.
    * DESCRIPTION: the module short description that will be displayed in the
      banner.
    * LONG_DESCRIPTION: the index page content.
    * URL: the module URL.
    * 
    * AUTHOR: the author of the module.
    * AUTHOR_EMAIL: the author e-mail.
    * __version__: the module version.

And optional keys:

    * EXTRANAME: a name that will be displayed in the last element of the
      navbar (default 'PYSPHINXDOC').
    * EXTRAURL: the associated URL (default the pySphinxDoc URL).
"""


# Get the module name passed in argument
def is_directory(dirarg):
    """ Type for argparse - checks that directory exists.
    """
    if not os.path.isdir(dirarg):
        raise argparse.ArgumentError(
            "The directory '{0}' does not exist!".format(dirarg))
    return dirarg
parser = argparse.ArgumentParser(description=doc)
parser.add_argument(
    "-v", "--verbose", dest="verbose", type=int, default=0, choices=[0, 1, 2],
    help="increase the verbosity level: 0 silent, [1, 2] verbose.")
parser.add_argument(
    "-p", "--path_module", dest="path_module", required=True, metavar="PATH",
    help="the path to the module to be documented.", type=is_directory)
parser.add_argument(
    "-n", "--name_module", dest="name_module", required=True,
    help="the name of the module to be documented.")
parser.add_argument(
    "-o", "--outdir", dest="outdir", required=True, metavar="PATH",
    help="the path to write documentation.", type=is_directory)
args = parser.parse_args()

# Check that a '$name_module/doc/source' folder has been created in the project
srcdir = os.path.join(args.path_module, "doc", "source")
if not os.path.isdir(srcdir):
    raise IOError("'{0}' is not a valid directory.".format(srcdir))

# Get all the modules involved
module_names = find_packages(args.path_module)
if args.verbose > 0:
    print("[info] Packaged to be documented...")
    print("[info] {0}".format(module_names))

# Generate a sphinx layout, API documentation, and Sphinx configuration.
docwriter = DocHelperWriter(module_names, args.name_module,
                            verbose=args.verbose)
srcdir = os.path.join(args.outdir, "source")
staticdir = os.path.join(srcdir, "_static")
generateddir = os.path.join(srcdir, "generated")
if os.path.isdir(generateddir):
    raise IOError("'{0}' already created, can't delete it "
                  "automatically.".format(generateddir))
os.mkdir(generateddir)
layoutdir = os.path.join(generateddir, "_templates")
os.mkdir(layoutdir)
# Generate the Sphinx configuration
if args.verbose > 0:
    print("[info] Generating configuration in {0}.".format(srcdir))
docwriter.write_sphinx_config(srcdir)
# Generate the layout
if args.verbose > 0:
    print("[info] Generating layout in {0}.".format(layoutdir))
docwriter.write_layout(layoutdir, staticdir)
# Generate the API documentation
if args.verbose > 0:
    print("[info] Generating API documentation in {0}.".format(generateddir))
docwriter.write_index(srcdir)
docwriter.write_installation(generateddir)
docwriter.write_documentation_index(generateddir)
docwriter.write_api_docs(generateddir, relative_to=generateddir)
